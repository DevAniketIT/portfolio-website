{
  "info": {
    "name": "üöÄ Job Application Tracker API - Enhanced",
    "description": "# üéØ Job Application Tracker API\n\nA comprehensive REST API for managing and tracking job applications with powerful filtering, analytics, and history tracking capabilities.\n\n## üöÄ Quick Start\n\n### 1. Set Up Environment\n- Import the environment file: `postman-environments.json`\n- Choose between **üõ†Ô∏è Local Development** or **üöÄ Production**\n- Set your `api_key` if authentication is required\n\n### 2. Test Connection\n- Start with the **Health Check** endpoint\n- Verify the **Root Endpoint** for API information\n- Check **OpenAPI Schema** for complete specification\n\n### 3. Common Workflows\n- **Quick Application Entry**: Use `üì§ Quick Track Application`\n- **Full Management**: Create, read, update, delete with Applications endpoints\n- **Analytics**: Use `üìä Get Analytics Stats` for dashboard data\n- **History Tracking**: Monitor status changes with History endpoints\n\n## üìö API Documentation\n\n- **Interactive Docs**: `{{base_url}}/docs`\n- **ReDoc**: `{{base_url}}/redoc`\n- **OpenAPI Schema**: `{{base_url}}/openapi.json`\n\n## üèóÔ∏è Architecture\n\n### üìÅ Applications Module\n- Complete CRUD operations\n- Advanced filtering and pagination\n- Full-text search capabilities\n- Status management\n\n### üìä Tracking & Analytics Module\n- Quick application tracking\n- Comprehensive history tracking\n- Analytics and statistics\n- Recent activity monitoring\n\n### ‚öôÔ∏è General Module\n- Health checks and monitoring\n- API information endpoints\n- Documentation access\n\n## üîç Advanced Features\n\n### Filtering & Search\n- **Status Filtering**: `?status=applied&status=reviewing`\n- **Company Search**: `?company_name=Google`\n- **Date Range**: `?date_from=2024-01-01&date_to=2024-03-31`\n- **Full-text Search**: `?search=python engineer`\n- **Combined Filters**: Mix multiple filters for precise results\n\n### Pagination & Sorting\n- **Page Control**: `?page=1&limit=20`\n- **Sorting**: `?sort_by=created_at&sort_order=desc`\n- **Large Datasets**: Efficient handling of thousands of records\n\n### Response Validation\n- Automatic response time validation\n- JSON structure verification\n- Status code validation\n- Custom business logic tests\n\n## üß™ Testing Features\n\n- **Pre-request Scripts**: Automatic header injection and logging\n- **Response Tests**: Comprehensive validation for all endpoints\n- **Environment Management**: Dynamic variable setting and retrieval\n- **Collection Variables**: Automatic ID management between requests\n\n## üîê Authentication\n\nCurrently, the API doesn't require authentication, but the collection is prepared for:\n- **API Key Authentication**: Set `api_key` in environment variables\n- **Bearer Token**: Easy switch to token-based auth\n- **Custom Headers**: Flexible authentication setup\n\n## üìä Response Format\n\nAll endpoints return consistent JSON responses:\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Operation completed successfully\",\n  \"data\": { /* response payload */ },\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n## üö® Error Handling\n\nError responses include:\n\n```json\n{\n  \"success\": false,\n  \"message\": \"Validation error\",\n  \"errors\": [\"Company name is required\"],\n  \"error_code\": \"VALIDATION_ERROR\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n## üí° Pro Tips\n\n1. **Use Collection Runner**: Automate testing workflows\n2. **Monitor Performance**: Check response times in test results\n3. **Environment Switching**: Easy deployment target changes\n4. **Variable Chaining**: Use created IDs in subsequent requests\n5. **Bulk Operations**: Leverage pagination for large datasets\n\n## üîó Integration Examples\n\n### Browser Extension\n```javascript\nfetch('{{base_url}}/api/tracking/track', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    company: document.title,\n    title: 'Software Engineer',\n    url: window.location.href\n  })\n})\n```\n\n### Dashboard Analytics\n```javascript\nfetch('{{base_url}}/api/tracking/stats')\n  .then(r => r.json())\n  .then(data => {\n    console.log('Success Rate:', data.success_rate + '%');\n    console.log('Total Applications:', data.total_applications);\n  })\n```",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0",
    "_postman_id": "enhanced-job-tracker-api-v2",
    "_exporter_id": "enhanced-collection-exporter"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// üöÄ Global Pre-request Script",
          "// Automatically executed before each request",
          "",
          "// Set current timestamp",
          "pm.globals.set('timestamp', new Date().toISOString());",
          "pm.globals.set('date_today', new Date().toISOString().split('T')[0]);",
          "",
          "// Generate unique request ID for tracking",
          "const requestId = pm.variables.replaceIn('{{$randomUUID}}');",
          "pm.globals.set('request_id', requestId);",
          "",
          "// Log request information",
          "console.log(`üöÄ REQUEST: ${pm.request.method} ${pm.request.url}`);",
          "console.log(`üÜî Request ID: ${requestId}`);",
          "console.log(`‚è∞ Timestamp: ${pm.globals.get('timestamp')}`);",
          "console.log(`üåç Environment: ${pm.environment.get('environment_name') || 'None'}`);",
          "",
          "// Add common headers",
          "pm.request.headers.add({",
          "    key: 'User-Agent',",
          "    value: 'Postman Job Tracker API Client/2.0'",
          "});",
          "",
          "pm.request.headers.add({",
          "    key: 'X-Request-ID',",
          "    value: requestId",
          "});",
          "",
          "// Add environment-specific headers",
          "if (pm.environment.get('environment_name')) {",
          "    pm.request.headers.add({",
          "        key: 'X-Environment',",
          "        value: pm.environment.get('environment_name')",
          "    });",
          "}",
          "",
          "// Handle API key authentication if present",
          "if (pm.environment.get('api_key')) {",
          "    pm.request.headers.add({",
          "        key: 'X-API-Key',",
          "        value: pm.environment.get('api_key')",
          "    });",
          "    console.log('üîê API Key authentication added');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// üß™ Global Test Script",
          "// Automatically executed after each response",
          "",
          "// Log response information",
          "console.log(`üì• RESPONSE: ${pm.response.status} ${pm.response.code}`);",
          "console.log(`‚è±Ô∏è Response Time: ${pm.response.responseTime}ms`);",
          "console.log(`üì¶ Response Size: ${pm.response.responseSize} bytes`);",
          "",
          "// Test response time (configurable per environment)",
          "const maxResponseTime = parseInt(pm.environment.get('request_timeout')) || 5000;",
          "pm.test(`‚ö° Response time is acceptable (< ${maxResponseTime}ms)`, function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
          "});",
          "",
          "// Test that we have a valid HTTP status code",
          "pm.test('üìä Valid HTTP status code', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204, 400, 401, 403, 404, 422, 429, 500, 502, 503]);",
          "});",
          "",
          "// Test content type for successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('üìÑ Response has JSON content type', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}",
          "",
          "// Test response structure for successful responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    try {",
          "        const jsonData = pm.response.json();",
          "        ",
          "        // Check for timestamp in response",
          "        if (jsonData.timestamp) {",
          "            pm.test('üìÖ Response has valid timestamp', function () {",
          "                pm.expect(jsonData.timestamp).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
          "            });",
          "        }",
          "        ",
          "        // Log success response structure",
          "        if (pm.environment.get('debug_mode') === 'true') {",
          "            console.log('üìã Response JSON keys:', Object.keys(jsonData));",
          "        }",
          "        ",
          "    } catch (e) {",
          "        console.log('‚ö†Ô∏è Response is not valid JSON');",
          "    }",
          "}",
          "",
          "// Test error response structure for error status codes",
          "if (pm.response.code >= 400) {",
          "    pm.test('‚ùå Error response has proper structure', function () {",
          "        try {",
          "            const jsonData = pm.response.json();",
          "            if (jsonData.detail) {",
          "                // FastAPI error format",
          "                pm.expect(jsonData).to.have.property('detail');",
          "            } else {",
          "                // Custom error format",
          "                pm.expect(jsonData).to.have.property('success').that.equals(false);",
          "                pm.expect(jsonData).to.have.property('message');",
          "            }",
          "        } catch (e) {",
          "            console.log('‚ö†Ô∏è Error response is not valid JSON');",
          "        }",
          "    });",
          "}",
          "",
          "// Performance tracking",
          "if (pm.response.responseTime > 3000) {",
          "    console.warn(`‚ö†Ô∏è Slow response detected: ${pm.response.responseTime}ms`);",
          "}",
          "",
          "// Success indicator",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('‚úÖ Request completed successfully');",
          "} else {",
          "    console.log(`‚ùå Request failed with status ${pm.response.code}`);",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string",
      "description": "Base URL for the API - managed by environment"
    },
    {
      "key": "api_key",
      "value": "{{api_key}}",
      "type": "string",
      "description": "API key for authentication - managed by environment"
    },
    {
      "key": "application_id",
      "value": "1",
      "type": "string",
      "description": "Sample application ID for testing"
    },
    {
      "key": "created_application_id",
      "value": "",
      "type": "string",
      "description": "ID of the last created application (auto-set by tests)"
    },
    {
      "key": "sample_company",
      "value": "Tech Corp Inc.",
      "type": "string",
      "description": "Sample company name for testing"
    },
    {
      "key": "sample_job_title",
      "value": "Senior Software Engineer",
      "type": "string",
      "description": "Sample job title for testing"
    }
  ],
  "item": [
    {
      "name": "üìÅ Applications",
      "description": "## üìã Job Application Management\n\nComplete CRUD operations for managing job applications with advanced filtering, pagination, and search capabilities.\n\n### üîç Available Filters:\n- **Status**: Filter by application status (applied, reviewing, interview, etc.)\n- **Company**: Search by company name (partial matching)\n- **Date Range**: Filter by application date ranges\n- **Job Type**: Filter by employment type (full_time, part_time, contract, etc.)\n- **Remote Type**: Filter by work arrangement (remote, on_site, hybrid)\n- **Priority**: Filter by priority level (low, medium, high)\n- **Full-text Search**: Search across multiple fields\n\n### üìä Pagination & Sorting:\n- Configurable page size (1-100 items)\n- Sort by any field (created_at, company_name, etc.)\n- Ascending or descending order\n\n### üí° Pro Tips:\n- Use multiple status filters: `?status=applied&status=reviewing`\n- Combine filters for precise results\n- Use search for quick finding across all text fields\n- Chain requests using collection variables",
      "item": [
        {
          "name": "üìÑ List Applications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response",
                  "pm.test('‚úÖ Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('üìä Response has pagination structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('page');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "    pm.expect(jsonData).to.have.property('pages');",
                  "    pm.expect(jsonData).to.have.property('has_next');",
                  "    pm.expect(jsonData).to.have.property('has_previous');",
                  "});",
                  "",
                  "// Test pagination values",
                  "pm.test('üî¢ Pagination values are valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total).to.be.a('number').and.be.at.least(0);",
                  "    pm.expect(jsonData.page).to.be.a('number').and.be.at.least(1);",
                  "    pm.expect(jsonData.limit).to.be.a('number').and.be.at.least(1);",
                  "    pm.expect(jsonData.pages).to.be.a('number').and.be.at.least(0);",
                  "    pm.expect(jsonData.has_next).to.be.a('boolean');",
                  "    pm.expect(jsonData.has_previous).to.be.a('boolean');",
                  "});",
                  "",
                  "// Test items structure if any exist",
                  "pm.test('üìù Items have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.items && jsonData.items.length > 0) {",
                  "        const firstItem = jsonData.items[0];",
                  "        pm.expect(firstItem).to.have.property('id');",
                  "        pm.expect(firstItem).to.have.property('company_name');",
                  "        pm.expect(firstItem).to.have.property('job_title');",
                  "        pm.expect(firstItem).to.have.property('status');",
                  "        pm.expect(firstItem).to.have.property('created_at');",
                  "        pm.expect(firstItem).to.have.property('updated_at');",
                  "        ",
                  "        // Store first application ID for other tests",
                  "        pm.collectionVariables.set('application_id', firstItem.id);",
                  "        console.log(`üìå Stored application ID: ${firstItem.id}`);",
                  "    }",
                  "});",
                  "",
                  "// Test calculated fields",
                  "pm.test('üßÆ Items have calculated fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.items && jsonData.items.length > 0) {",
                  "        const firstItem = jsonData.items[0];",
                  "        if (firstItem.days_since_applied !== undefined) {",
                  "            pm.expect(firstItem.days_since_applied).to.be.a('number').and.be.at.least(0);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "// Log results",
                  "const jsonData = pm.response.json();",
                  "console.log(`üìä Found ${jsonData.total} total applications`);",
                  "console.log(`üìÑ Showing ${jsonData.items ? jsonData.items.length : 0} items on page ${jsonData.page} of ${jsonData.pages}`);",
                  "if (jsonData.items && jsonData.items.length > 0) {",
                  "    console.log(`üè¢ Companies: ${jsonData.items.map(item => item.company_name).slice(0, 3).join(', ')}`);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/applications/?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "applications", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (1-indexed)"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Items per page (1-100)"
                },
                {
                  "key": "status",
                  "value": "applied",
                  "description": "Filter by status",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "reviewing",
                  "description": "Multiple status values supported",
                  "disabled": true
                },
                {
                  "key": "company_name",
                  "value": "Google",
                  "description": "Filter by company (partial match)",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "python engineer",
                  "description": "Search across multiple fields",
                  "disabled": true
                },
                {
                  "key": "date_from",
                  "value": "2024-01-01",
                  "description": "Filter from date (YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "date_to",
                  "value": "2024-12-31",
                  "description": "Filter to date (YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "job_type",
                  "value": "full_time",
                  "description": "Filter by job type",
                  "disabled": true
                },
                {
                  "key": "remote_type",
                  "value": "hybrid",
                  "description": "Filter by remote work type",
                  "disabled": true
                },
                {
                  "key": "priority",
                  "value": "high",
                  "description": "Filter by priority level",
                  "disabled": true
                },
                {
                  "key": "sort_by",
                  "value": "created_at",
                  "description": "Sort field",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "desc",
                  "description": "Sort order (asc/desc)",
                  "disabled": true
                }
              ]
            },
            "description": "## üìÑ List Applications\n\n**Purpose**: Retrieve a paginated list of job applications with comprehensive filtering and sorting options.\n\n**Features**:\n- ‚úÖ Pagination with configurable page size\n- üîç Multiple filter options\n- üî§ Full-text search across fields\n- üìä Sorting by any field\n- üïê Calculated fields (days since applied)\n\n**Common Use Cases**:\n- View all applications: Default request\n- Find by company: `?company_name=Google`\n- Search roles: `?search=python engineer`\n- Filter by status: `?status=applied&status=reviewing`\n- Recent applications: `?sort_by=created_at&sort_order=desc`\n- Date range: `?date_from=2024-01-01&date_to=2024-03-31`\n\n**Response Structure**:\n```json\n{\n  \"items\": [/* application objects */],\n  \"total\": 150,\n  \"page\": 1,\n  \"limit\": 20,\n  \"pages\": 8,\n  \"has_next\": true,\n  \"has_previous\": false\n}\n```"
          },
          "response": [
            {
              "name": "‚úÖ Success - Applications Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/applications/?page=1&limit=5",
                  "host": ["{{base_url}}"],
                  "path": ["api", "applications", ""],
                  "query": [
                    {"key": "page", "value": "1"},
                    {"key": "limit", "value": "5"}
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {"key": "Content-Type", "value": "application/json"}
              ],
              "body": "{\n  \"items\": [\n    {\n      \"id\": 123,\n      \"company_name\": \"Google Inc.\",\n      \"job_title\": \"Senior Software Engineer\",\n      \"job_url\": \"https://careers.google.com/jobs/results/123456789\",\n      \"location\": \"Mountain View, CA, USA\",\n      \"salary_min\": 120000,\n      \"salary_max\": 180000,\n      \"currency\": \"USD\",\n      \"job_type\": \"full_time\",\n      \"remote_type\": \"hybrid\",\n      \"application_date\": \"2024-01-15\",\n      \"status\": \"applied\",\n      \"priority\": \"high\",\n      \"notes\": \"Applied through referral from John\",\n      \"contact_email\": \"recruiter@google.com\",\n      \"days_since_applied\": 15,\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-20T14:20:00Z\"\n    }\n  ],\n  \"total\": 25,\n  \"page\": 1,\n  \"limit\": 5,\n  \"pages\": 5,\n  \"has_next\": true,\n  \"has_previous\": false\n}"
            },
            {
              "name": "üì≠ Success - No Applications",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/applications/?page=1&limit=20",
                  "host": ["{{base_url}}"],
                  "path": ["api", "applications", ""],
                  "query": [
                    {"key": "page", "value": "1"},
                    {"key": "limit", "value": "20"}
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {"key": "Content-Type", "value": "application/json"}
              ],
              "body": "{\n  \"items\": [],\n  \"total\": 0,\n  \"page\": 1,\n  \"limit\": 20,\n  \"pages\": 0,\n  \"has_next\": false,\n  \"has_previous\": false\n}"
            }
          ]
        },
        {
          "name": "‚ûï Create Application",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate dynamic test data",
                  "const companies = ['Google Inc.', 'Microsoft Corp.', 'Apple Inc.', 'Amazon.com', 'Meta Platforms'];",
                  "const jobTitles = ['Senior Software Engineer', 'Full Stack Developer', 'DevOps Engineer', 'Product Manager', 'Data Scientist'];",
                  "const locations = ['San Francisco, CA', 'Seattle, WA', 'New York, NY', 'Austin, TX', 'Boston, MA'];",
                  "",
                  "// Set dynamic values",
                  "pm.variables.set('random_company', companies[Math.floor(Math.random() * companies.length)]);",
                  "pm.variables.set('random_job_title', jobTitles[Math.floor(Math.random() * jobTitles.length)]);",
                  "pm.variables.set('random_location', locations[Math.floor(Math.random() * locations.length)]);",
                  "pm.variables.set('random_salary_min', Math.floor(Math.random() * 50000) + 70000);",
                  "pm.variables.set('random_salary_max', Math.floor(Math.random() * 80000) + 120000);",
                  "",
                  "console.log('üé≤ Generated random test data for application creation');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful creation",
                  "pm.test('‚úÖ Status code is 201 (Created)', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('üìù Response has application structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('company_name');",
                  "    pm.expect(jsonData).to.have.property('job_title');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "    pm.expect(jsonData).to.have.property('updated_at');",
                  "});",
                  "",
                  "// Test data integrity",
                  "pm.test('üîç Created data matches request', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(jsonData.company_name).to.equal(requestBody.company_name);",
                  "    pm.expect(jsonData.job_title).to.equal(requestBody.job_title);",
                  "    pm.expect(jsonData.status).to.equal(requestBody.status || 'applied');",
                  "});",
                  "",
                  "// Test auto-generated fields",
                  "pm.test('ü§ñ Auto-generated fields are present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.created_at).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "    pm.expect(jsonData.updated_at).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "// Store created application ID for other tests",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.id) {",
                  "    pm.collectionVariables.set('created_application_id', jsonData.id);",
                  "    console.log(`üìå Stored created application ID: ${jsonData.id}`);",
                  "}",
                  "",
                  "// Log success",
                  "console.log(`‚úÖ Application created: ${jsonData.company_name} - ${jsonData.job_title}`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"company_name\": \"{{random_company}}\",\n  \"job_title\": \"{{random_job_title}}\",\n  \"job_url\": \"https://careers.example.com/jobs/{{$randomInt}}\",\n  \"job_description\": \"Exciting opportunity to work with cutting-edge technologies\",\n  \"location\": \"{{random_location}}\",\n  \"salary_min\": {{random_salary_min}},\n  \"salary_max\": {{random_salary_max}},\n  \"currency\": \"USD\",\n  \"job_type\": \"full_time\",\n  \"remote_type\": \"hybrid\",\n  \"application_date\": \"{{date_today}}\",\n  \"deadline\": null,\n  \"status\": \"applied\",\n  \"priority\": \"medium\",\n  \"notes\": \"Applied through company website on {{date_today}}\",\n  \"referral_name\": null,\n  \"contact_email\": \"hiring@{{$randomDomainName}}\",\n  \"contact_person\": \"{{$randomFirstName}} {{$randomLastName}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/applications/",
              "host": ["{{base_url}}"],
              "path": ["api", "applications", ""]
            },
            "description": "## ‚ûï Create Application\n\n**Purpose**: Create a new job application with comprehensive data validation.\n\n**Features**:\n- ‚úÖ Automatic ID generation\n- üìÖ Timestamp management\n- üîç Data validation using Pydantic models\n- üßÆ Calculated fields (days since applied)\n\n**Required Fields**:\n- `company_name`: Company name (1-200 characters)\n- `job_title`: Job title (1-200 characters)\n\n**Optional Fields**:\n- All other fields with sensible defaults\n- `status` defaults to \"applied\"\n- `priority` defaults to \"medium\"\n- `currency` defaults to \"USD\"\n\n**Validation Rules**:\n- Company and job title cannot be empty\n- Currency must be 3-letter code\n- Salary max must be > salary min\n- Deadline cannot be before application date\n- Email must be valid format\n\n**Example Usage**:\n```json\n{\n  \"company_name\": \"Google Inc.\",\n  \"job_title\": \"Senior Software Engineer\",\n  \"location\": \"Mountain View, CA\",\n  \"salary_min\": 120000,\n  \"salary_max\": 180000,\n  \"status\": \"applied\",\n  \"priority\": \"high\"\n}\n```"
          },
          "response": [
            {
              "name": "‚úÖ Success - Application Created",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {"key": "Content-Type", "value": "application/json"}
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"company_name\": \"Google Inc.\",\n  \"job_title\": \"Senior Software Engineer\",\n  \"location\": \"Mountain View, CA, USA\",\n  \"salary_min\": 120000,\n  \"salary_max\": 180000,\n  \"status\": \"applied\",\n  \"priority\": \"high\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/applications/",
                  "host": ["{{base_url}}"],\n  "path": ["api", "applications", ""]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {"key": "Content-Type", "value": "application/json"}
              ],
              "body": "{\n  \"id\": 124,\n  \"company_name\": \"Google Inc.\",\n  \"job_title\": \"Senior Software Engineer\",\n  \"job_url\": null,\n  \"job_description\": null,\n  \"location\": \"Mountain View, CA, USA\",\n  \"salary_min\": 120000,\n  \"salary_max\": 180000,\n  \"currency\": \"USD\",\n  \"job_type\": \"full_time\",\n  \"remote_type\": \"on_site\",\n  \"application_date\": \"2024-01-15\",\n  \"deadline\": null,\n  \"status\": \"applied\",\n  \"priority\": \"high\",\n  \"notes\": null,\n  \"referral_name\": null,\n  \"contact_email\": null,\n  \"contact_person\": null,\n  \"days_since_applied\": 0,\n  \"created_at\": \"2024-01-15T15:30:00Z\",\n  \"updated_at\": \"2024-01-15T15:30:00Z\"\n}"
            },
            {
              "name": "‚ùå Error - Validation Failed",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {"key": "Content-Type", "value": "application/json"}
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"company_name\": \"\",\n  \"job_title\": \"\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/applications/",
                  "host": ["{{base_url}}"],
                  "path": ["api", "applications", ""]
                }
              },
              "status": "Unprocessable Entity",
              "code": 422,
              "_postman_previewlanguage": "json",
              "header": [
                {"key": "Content-Type", "value": "application/json"}
              ],
              "body": "{\n  \"detail\": [\n    {\n      \"loc\": [\"body\", \"company_name\"],\n      \"msg\": \"ensure this value has at least 1 characters\",\n      \"type\": \"value_error.any_str.min_length\",\n      \"ctx\": {\"limit_value\": 1}\n    },\n    {\n      \"loc\": [\"body\", \"job_title\"],\n      \"msg\": \"ensure this value has at least 1 characters\",\n      \"type\": \"value_error.any_str.min_length\",\n      \"ctx\": {\"limit_value\": 1}\n    }\n  ]\n}"
            }
          ]
        }
      ]
    }
  ]
}
